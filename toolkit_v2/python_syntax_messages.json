{
	".abs()": "Returns the absolute value of a number.",
	".all()": "Return True if all elements of the iterable are true (or if the iterable is empty).",
    ".any()": "Return True if any element of the iterable is true. If the iterable is empty, return False.",
    ".bool()": "Return a Boolean value, i.e. one of True or False.",
	".callable()": "Return True if the object argument appears callable, False if not.",
    ".divmod()": "Take two (non-complex) numbers as arguments and return a pair of numbers consisting of their quotient and remainder when using integer division.",
    ".enumerate()": "Return an enumerate object. iterable must be a sequence, an iterator, or some other object which supports iteration.",
    ".float()": "Return a floating point number constructed from a number or string x.",
    ".frozenset()": "Arguements: iterable = set(). Return a new frozenset object, optionally with elements taken from iterable",
	".hash()": "Return the hash value of the object (if it has one). Hash values are integers. They are used to quickly compare dictionary keys during a dictionary lookup.",
	".id()": "Return the 'identity' of an object. This is an integer which is guaranteed to be unique and constant for this object during its lifetime",
    ".input()": "Get user input. If the prompt argument is present, it is written to standard output without a trailing newline",
    ".int()": "Return an integer object constructed from a number or string x, or return 0 if no arguments are given",
    ".isinstance()": "classinfo. Return True if the object argument is an instance of the classinfo argument, or of a (direct, indirect, or virtual) subclass thereof. If object is not an object of the given type, the function always returns False",
	".issubclass()": "Return True if class is a subclass (direct, indirect, or virtual) of classinfo. A class is considered a subclass of itself",
    ".iter()": "Return an iterator object. The first argument is interpreted very differently depending on the presence of the second argument. Without a second argument, object must be a collection object which supports the iterable protocol (the __iter__() method), or it must support the sequence protocol (the __getitem__() method with integer arguments starting at 0). If it does not support either of those protocols, TypeError is raised. If the second argument, sentinel, is given, then object must be a callable object",
    ".len()": "Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set)",
    ".list()": "Rather than being a function, list is actually a mutable sequence type, as documented in Lists and Sequence Types — list, tuple, range",
    ".map()": "Return an iterator that applies function to every item of iterable, yielding the results. If additional iterables arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel",
    ".max()": "Return the largest item in an iterable or the largest of two or more arguments",
    ".min()": "Return the smallest item in an iterable or the smallest of two or more arguments",
    ".next()": "Retrieve the next item from the iterator by calling its __next__() method",
    ".open()": "Open file and return a corresponding file object",
    ".pow()": "Return base to the power exp; if mod is present, return base to the power exp, modulo mod (computed more efficiently than pow(base, exp) % mod)",
    ".print()": "Print objects to the text stream file, separated by sep and followed by end. sep, end, file, and flush, if present, must be given as keyword arguments",
    ".range()": "Rather than being a function, range is actually an immutable sequence type, as documented in Ranges and Sequence Types — list, tuple, range",
    ".reversed()": "Return a reverse iterator",
    ".round()": "Return number rounded to ndigits precision after the decimal point",
    ".sorted()": "Return a new sorted list from the items in iterable",
    ".str()": "Return a str version of object",
    ".sum()": "Sums start and the items of an iterable from left to right and returns the total. The iterable’s items are normally numbers, and the start value is not allowed to be a string",
    ".tuple()": "Rather than being a function, tuple is actually an immutable sequence type, as documented in Tuples and Sequence Types — list, tuple, range",
    ".type()": "With one argument, return the type of an object",
    ".zip()": "Iterate over several iterables in parallel, producing tuples with an item from each one",
    "capitalize": "Return a copy of the string with its first character capitalized and the rest lowercased.",
    "swapcase": "Return a copy of the string with uppercase characters converted to lowercase and vice versa. Note that it is not necessarily true that s.swapcase().swapcase() == s.",
    "upper": "Return a copy of the string with all the cased characters converted to uppercase. Note that s.upper().isupper() might be False if s contains uncased characters or if the Unicode category of the resulting character(s) is not “Lu” (Letter, uppercase), but e.g. “Lt” (Letter, titlecase).",
    "lower": "Return a copy of the string with all the cased characters converted to lowercase.",
    "isalpha": "eturn True if all characters in the string are alphabetic and there is at least one character, False otherwise. Alphabetic characters are those characters defined in the Unicode character database as “Letter”, i.e., those with general category property being one of “Lm”, “Lt”, “Lu”, “Ll”, or “Lo”.",
    "isdigit": "Return True if all characters in the string are digits and there is at least one character, False otherwise. Digits include decimal characters and digits that need special handling, such as the compatibility superscript digits.",
    "isalnum": "Return True if all characters in the string are alphanumeric and there is at least one character, False otherwise. A character c is alphanumeric if one of the following returns True: c.isalpha(), c.isdecimal(), c.isdigit(), or c.isnumeric().",
    "islower": "Return True if all cased characters in the string are lowercase and there is at least one cased character, False otherwise.",
    "isupper": "Return True if all cased characters in the string are uppercase and there is at least one cased character, False otherwise.",
    "isspace": "Return True if there are only whitespace characters in the string and there is at least one character, False otherwise.",
    "split": "Return a list of the words in the string, using sep as the delimiter string. If maxsplit is given, at most maxsplit splits are done (thus, the list will have at most maxsplit+1 elements). If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made).",
    "rstrip": "Return a copy of the string with trailing characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or None, the chars argument defaults to removing whitespace. The chars argument is not a suffix; rather, all combinations of its values are stripped.",
    "lstrip": "Return a copy of the string with leading characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or None, the chars argument defaults to removing whitespace. The chars argument is not a prefix; rather, all combinations of its values are stripped.",
    "replace": "Return a copy of the string with all occurrences of substring old replaced by new. If the optional argument count is given, only the first count occurrences are replaced.",
    "split": "Return a list of the words in the string, using sep as the delimiter string. If maxsplit is given, at most maxsplit splits are done (thus, the list will have at most maxsplit+1 elements). If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made).",
    "find": "Return the lowest index in the string where substring sub is found within the slice s[start:end]. Optional arguments start and end are interpreted as in slice notation. Return -1 if sub is not found.",
    "rfind": "Return the highest index in the string where substring sub is found, such that sub is contained within s[start:end]. Optional arguments start and end are interpreted as in slice notation. Return -1 on failure.",
    "len(list)": "Length of s.",
    "list.append()": "appends x to the end of the sequence (same as s[len(s):len(s)] = [x])",
    "list.pop()": "Retrieves the item at i and also removes it from s",
    "list.reverse()": "Reverses the items of s in place",
    "dict.keys()": "Return a new view of the dictionary’s keys.",
    "dict.values()": "Return a new view of the dictionary’s values. An equality comparison between one dict.values() view and another will always return False. This also applies when comparing dict.values() to itself.",
    "dict.items()": "Return a new view of the dictionary’s items ((key, value) pairs).",
    "dict.get()": "Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a KeyError."
}